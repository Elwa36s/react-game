{"version":3,"sources":["redux/actions/actionType.js","redux/reducers/arrayTransformation.js","redux/reducers/gameLogic.js","assets/sounds/win.mp3","assets/sounds/lose.mp3","assets/sounds/keypress.mp3","redux/reducers/fieldReducer.js","redux/reducers/buttonsReducer.js","redux/reducers/reducer.js","reportWebVitals.js","components/tile/Tile.js","redux/actions/actionCreators.js","components/field/Field.js","components/buttons/buttons.js","components/stat/stat.js","components/app/app.js","index.js"],"names":["UP","DOWN","LEFT","RIGHT","INIT_GAME","CHECK_WIN","CHECK_LOSE","CHECK_SCORE","LOAD_LAST_GAME","SETTINGS","SHOW_SCORE","MUTE_SOUND","RESET_BEST_SCORE","makeLines","array","lines","forEach","value","index","lineIndex","Math","floor","push","rotate","arr","times","check","rotatedArr","map","item","idx","row","reverse","sum","result","summedArr","i","j","filter","val","length","isNaN","numb","unshiftZeros","unshift","findEmpties","emptyIndex","putRandomNumber","possibleIndexes","getRandomInt","max","random","currentNumb","checkPossibleMove","defaultArray","changedArray","initGame","emptyField","tiles","calculateScore","reduce","isWin","isLose","winGame","Audio","winSound","loseGame","loseSound","moveGame","moveSound","initialState","currentScore","bestScore","moves","win","lose","top10","gameStop","muted","fieldReducer","state","action","concat","arrLined","type","num","payload","back","swappedArr","flat","play","wasWin","bestResults","score","lastLose","loadedState","JSON","parse","localStorage","getItem","isMuted","settingsIsOpen","buttonsReducer","modal","reducers","combineReducers","field","buttons","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Tile","props","className","mapDispatchToProps","moveUp","moveDown","moveLeft","moveRight","loadGame","connect","useEffect","document","addEventListener","e","eventHandler","removeEventListener","saveGame","event","keyCode","currentState","stringify","setItem","id","tile","settings","mute","leaderBoard","resetScore","onClick","sort","a","b","slice","record","checkForLose","checkForWin","calcScore","App","store","createStore","gameReducers","compose","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","getElementById"],"mappings":"6SAAaA,EAAK,KACLC,EAAO,OACPC,EAAO,OACPC,EAAQ,QACRC,EAAY,YACZC,EAAY,YACZC,EAAa,aACbC,EAAc,cACdC,EAAiB,iBACjBC,EAAW,WACXC,EAAa,aACbC,EAAa,aACbC,EAAmB,mBCZhC,SAASC,EAAUC,GACf,IAAIC,EAAQ,GAMZ,OALAD,EAAME,SAAQ,SAACC,EAAOC,GAClB,IAAIC,EAAYC,KAAKC,MAAMH,EAAQ,GACnCH,EAAMI,GAAaJ,EAAMI,IAAc,GACvCJ,EAAMI,GAAWG,KAAKL,MAEnBF,EAGX,SAASQ,EAAOC,GAAgB,IAAXC,EAAU,uDAAF,EACnBC,EAAQD,EAAQ,EAChBE,EAAaH,EAAI,GAAGI,KAAI,SAACC,EAAMC,GAAP,OAAeN,EAAII,KAAI,SAACG,GAAD,OAASA,EAAID,MAAME,aACxE,OAAiB,IAAVN,EAAcC,EAAaJ,EAAOI,EAAYD,GAGzD,SAASO,EAAIT,GAGT,IAFA,IAAMU,EAAS,GACTC,EAAY,GACVC,EAAI,EAAGA,EAAI,EAAGA,IAAI,CAGtB,IAFJ,IAAIL,EAAMP,EAAIY,GAEFC,GADZN,EAAMA,EAAIO,QAAO,SAAAC,GAAG,OAAa,IAARA,MACLC,OAAQH,GAAK,EAAGA,IACzBN,EAAIM,KAAON,EAAIM,EAAE,KACZI,MAAMV,EAAIM,EAAE,MACpBN,EAAIM,IAAMN,EAAIM,EAAE,GAAK,EACrBN,EAAIM,EAAE,GAAK,EACXN,EAAMA,EAAIO,QAAO,SAAAC,GAAG,OAAa,IAARA,OAG7BR,EAAMA,EAAIH,KAAI,SAACc,GAAD,OAASA,EAAO,IAAM,EAAKA,GAAQ,EAAIA,KACzDP,EAAUb,KAAKS,GAEf,IAAK,IAAIK,EAAI,EAAGA,EAAI,EAAGA,IAAI,CACvB,IAAIL,EAAMI,EAAUC,GACpBF,EAAOZ,KAAKqB,EAAaZ,IAE7B,OAAOG,EAGX,SAASS,EAAa7B,GAElB,OADIA,EAAM0B,OAAS,GAAG1B,EAAM8B,QAAQ,GACZ,IAAjB9B,EAAM0B,OAAe1B,EAAQ6B,EAAa7B,GAGrD,SAAS+B,EAAY/B,GACjB,IAAIgC,EAAa,GAEjB,OADAhC,EAAME,SAAQ,SAACC,EAAOC,GAAwB,IAAVD,GAAa6B,EAAWxB,KAAKJ,MAC1D4B,EAIX,SAASC,EAAgBjC,GACrB,IAAMkC,EAAkBH,EAAY/B,GAGpC,SAASmC,EAAaC,GACtB,OAAO9B,KAAKC,MAAMD,KAAK+B,SAAW/B,KAAKC,MAAM6B,IAG7C,IACAE,EAPmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAM3BH,EAAa,KAKjC,OADAnC,EADekC,EADCC,EAAaD,EAAgBR,UAEvBY,EACftC,EAGX,SAASuC,EAAkBC,EAAcC,GACrC,IAAK,IAAInB,EAAI,EAAGA,EAAIkB,EAAad,OAAQJ,IACzC,GAAIkB,EAAalB,KAAOmB,EAAanB,GAAI,OAAO,ECpEpD,SAASoB,IAEG,IADR,IAAMC,EAAa,GACHrB,EAAI,EAAGA,EAAG,GAAIA,IAClBqB,EAAWnC,KAAK,GAE5B,IAAIoC,EAAQX,EAAgBU,GAE5B,OADAC,EAAQX,EAAgBW,GAK5B,SAASC,EAAe7C,GACpB,OAAOA,EAAM8C,QAAO,SAAC3B,EAAKhB,GAAN,OAAgBgB,EAAOhB,IAAO,GAGtD,SAAS4C,EAAM/C,GAEX,OAAyB,IADZA,EAAMwB,QAAO,SAACrB,GAAD,OAAqB,OAAVA,KACvBuB,OAGlB,SAASsB,EAAOhD,GAEZ,GAAqB,IADP+B,EAAY/B,GAChB0B,OAAa,CAEnB,IADA,IAAMN,EAAS,GACPE,EAAI,EAAGA,EAAItB,EAAM0B,OAAQJ,IAC1BtB,EAAMsB,KAAOtB,EAAMsB,EAAE,IACX,IAANA,GAAiB,IAANA,GAAiB,KAANA,GAC1BF,EAAOZ,KAAKR,EAAMsB,IAGlBA,GAAK,IACAtB,EAAMsB,KAAOtB,EAAMsB,EAAE,IACrBF,EAAOZ,KAAKR,EAAMsB,IAI9B,OAA0B,IAAlBF,EAAOM,OAEnB,OAAO,ECxCI,UAA0B,gCCA1B,MAA0B,iCCA1B,MAA0B,qCCUnCuB,EAAU,IAAIC,MAAMC,GACtBC,EAAW,IAAIF,MAAMG,GACrBC,EAAW,IAAIJ,MAAMK,GAEnBC,EAAe,CACjBZ,MAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACvCa,aAAe,EACfC,UAAY,EACZC,MAAQ,EACRC,KAAM,EACNC,MAAO,EACPC,MAAQ,GACRC,UAAU,EACVC,OAAQ,GAqHGC,EAjHM,WAAmC,IAAlCC,EAAiC,uDAAzBV,EAAcW,EAAW,uCAC7CvB,EAAQsB,EAAMtB,MAChBe,EAAQO,EAAMP,MACZjD,EAAM,GAAG0D,OAAOxB,GAChByB,EAAWtE,EAAUW,GACrBgD,EAAYQ,EAAMR,UAExB,OAAOS,EAAOG,MACV,KAAKpF,EACD,IAAMqF,EAAMJ,EAAOK,QACfC,EAAO,EAAIF,EACXG,EAAajE,EAAO4D,EAAUE,GAC9BlD,EAAYF,EAAIuD,GAChBtD,EAASX,EAAOY,EAAWoD,GAAME,KAAK,GAC1C,OAAIpC,EAAkB7B,EAAKU,KAAY8C,EAAMH,UACzC3C,EAASa,EAAgBb,GACzBuC,GAAS,EACJO,EAAMF,OAAOV,EAASsB,OACxB,2BAAIV,GAAX,IAAkBtB,MAAQxB,EAAQuC,MAAQA,KAEvC,eAAIO,GAEX,KAAK/E,EACD,IAAMoF,EAAMJ,EAAOK,QACfC,EAAO,EAAIF,EACXG,EAAajE,EAAO4D,EAAUE,GAC9BlD,EAAYF,EAAIuD,GAChBtD,EAASX,EAAOY,EAAWoD,GAAME,KAAK,GACtC,OAAIpC,EAAkB7B,EAAKU,KAAY8C,EAAMH,UACzC3C,EAASa,EAAgBb,GACzBuC,GAAS,EACJO,EAAMF,OAAOV,EAASsB,OACpB,2BAAIV,GAAX,IAAkBtB,MAAQxB,EAAQuC,MAAQA,KAE3C,eAAIO,GAEf,KAAK9E,EACD,IAAMmF,EAAMJ,EAAOK,QACfC,EAAO,EAAIF,EACXG,EAAajE,EAAO4D,EAAUE,GAC9BlD,EAAYF,EAAIuD,GAChBtD,EAASX,EAAOY,EAAWoD,GAAME,KAAK,GACtC,OAAIpC,EAAkB7B,EAAKU,KAAY8C,EAAMH,UACzC3C,EAASa,EAAgBb,GACzBuC,GAAS,EACJO,EAAMF,OAAOV,EAASsB,OACpB,2BAAIV,GAAX,IAAkBtB,MAAQxB,EAAQuC,MAAQA,KAE3C,eAAIO,GAGf,KAAK7E,EACD,IAAMgC,EAAYF,EAAIkD,GAClBjD,EAASC,EAAUsD,KAAK,GACxB,OAAIpC,EAAkB7B,EAAKU,KAAY8C,EAAMH,UACzC3C,EAASa,EAAgBb,GACzBuC,GAAS,EACJO,EAAMF,OAAOV,EAASsB,OACpB,2BAAIV,GAAX,IAAkBtB,MAAQxB,EAAQuC,MAAQA,KAE3C,eAAIO,GAEf,KAAK5E,EACD,IAAM8B,EAASsB,IACf,OAAO,2BAAIwB,GAAX,IAAkBtB,MAAQxB,EAAQuC,MAAO,EAAGF,aAAe,EAAGG,KAAM,EAAOC,MAAO,EAAOE,UAAU,IAGvG,KAAKxE,EACD,IAAMsF,EAASX,EAAMN,IACfA,EAAMb,EAAMH,GACZkC,EAAcZ,EAAMJ,MAM7B,OALOF,IAAQiB,IACTC,EAAYtE,KAAK,CAACuE,MAAQb,EAAMT,aAAcE,MAAQO,EAAMP,QACvDO,EAAMF,OAAOf,EAAQ2B,QAGzBhB,EAAG,2BAAOM,GAAP,IAAcN,IAAMA,EAAKG,SAAWH,EAAKE,MAAQgB,IAAjD,eAAoEZ,GAE/E,KAAK1E,EACD,IAAMwF,EAAWd,EAAML,KACjBA,GAAOb,EAAOJ,GACdkC,GAAcZ,EAAMJ,MAK1B,OAJID,KAASmB,IACVF,GAAYtE,KAAK,CAACuE,MAAQb,EAAMT,aAAcE,MAAQO,EAAMP,QACvDO,EAAMF,OAAOZ,EAASwB,QAEvBf,GAAI,2BAAOK,GAAP,IAAcL,KAAOA,GAAME,SAAWF,GAAMC,MAAQgB,KAApD,eAAuEZ,GAEtF,KAAKzE,EACD,IAAMgE,GAAeZ,EAAeD,GACpC,OAAOa,GAAeC,EAAf,2BAA+BQ,GAA/B,IAAsCT,gBAAcC,UAAYD,KAAhE,2BAAoFS,GAApF,IAA2FT,kBAEtG,KAAK/D,EACD,IAAMuF,GAAcC,KAAKC,MAAMC,aAAaC,QAAQ,cACpD,OAAwB,OAAhBJ,GAAD,YAAC,eAA4Bf,GAAUe,IAAef,EAGjE,KAAKpE,EACD,IAAM4D,GAAY,EACZI,GAAQ,GACd,OAAO,2BAAII,GAAX,IAAkBJ,MAAQA,GAAOJ,UAAYA,KAEjD,KAAK7D,EACD,IAAMyF,IAAWpB,EAAMF,MACvB,OAAO,2BAAIE,GAAX,IAAkBF,MAAQsB,KAE9B,QACI,OAAOpB,ICpIbV,EAAe,CACjB+B,gBAAiB,EACjBR,OAAQ,GAgBGS,EAbQ,WAAmC,IAAlCtB,EAAiC,uDAAzBV,EAAcW,EAAW,uCACrD,OAAOA,EAAOG,MACV,KAAK3E,EACD,IAAM8F,GAASvB,EAAMqB,eACrB,OAAO,2BAAIrB,GAAX,IAAkBqB,eAAiBE,IAEnC,KAAK7F,EACL,IAAMmF,GAASb,EAAMa,MACzB,OAAO,2BAAIb,GAAX,IAAkBa,MAAQA,IAE1B,QAAS,OAAOb,ICPTwB,EALEC,YAAgB,CAC7BC,MAAQ3B,EACR4B,QAAUL,ICKCM,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,qBCLC,SAASQ,EAAKC,GAC7B,OACI,qBAAKC,UAAS,oBAAeD,EAAMrG,OAAnC,SACCqG,EAAMrG,QC0BX,SAASuC,IACL,MAAO,CACH4B,KAAMhF,GC8Dd,IAIMoH,EAAqB,CACvBC,ODhGJ,WACI,MAAO,CACHrC,KAAMpF,EACNsF,QAAS,IC6FLoC,SD1FZ,WACI,MAAO,CACHtC,KAAMnF,EACNqF,QAAU,ICuFIqC,SDnFtB,WACI,MAAO,CACHvC,KAAMlF,EACNoF,QAAU,ICgFcsC,UD5EhC,WACI,MAAO,CACHxC,KAAMjF,EACNmF,QAAU,ICyEyB9B,WAAUqE,SD7CrD,WACI,MAAO,CACHzC,KAAM5E,KC6CCsH,eAPS,SAAA9C,GACnB,OAAO,2BAAIA,EAAM0B,OAAjB,IAAwB5B,MAAQE,EAAM0B,MAAM5B,UAMT0C,EAAzBM,EA9Ff,SAAeR,GACXS,qBAAU,WAGN,OAFAC,SAASC,iBAAiB,WAAW,SAACC,GAAOC,EAAaD,MAEnD,WACLF,SAASI,oBAAoB,WAAW,SAACF,GAAOC,EAAaD,SAGjE,IACFH,qBAAU,WACJT,EAAMO,aACN,IACNE,qBAAU,WACRM,EAASf,KACT,CAACA,IACH,IAAMa,EAAe,SAACG,GAClB,OAAQA,EAAMC,SACV,KAAK,GAGL,KAAK,GACAjB,EAAMK,WACP,MACF,KAAK,GAGL,KAAK,GACFL,EAAMG,SACP,MACF,KAAK,GAGL,KAAK,GACFH,EAAMM,YACP,MACF,KAAK,GAGL,KAAK,GACFN,EAAMI,WACP,MACF,KAAK,GACFJ,EAAM9D,aAMb6E,EAAW,SAACrD,GAChB,IAAMwD,EAAexC,KAAKyC,UAAUzD,GACpCkB,aAAawC,QAAQ,YAAaF,IAGpC,OAAIlB,EAAM3C,KAEN,sBAAK4C,UAAU,YAAYoB,GAAG,aAA9B,UACE,8CACA,6CAAgBrB,EAAM/C,aAAtB,OAAwC+C,EAAM7C,MAA9C,eAIF6C,EAAM5C,IAEN,sBAAK6C,UAAU,YAAYoB,GAAG,YAA9B,UACE,iDACA,uDAA0BrB,EAAM/C,aAAhC,aAAwD+C,EAAM7C,MAA9D,gBAID6C,EAAM5C,KAAQ4C,EAAM3C,UAAzB,EAEI,qBAAKgE,GAAG,QAAR,SAEI9H,EAAUyG,EAAM5D,OAAO9B,KAAI,SAAC8B,EAAMvC,GAC1B,OACI,qBAAqBoG,UAAU,WAA/B,SACI7D,EAAM9B,KAAI,SAACgH,EAAM1H,GACb,OAAO,cAAC,EAAD,CAAgCD,MAAO2H,GAAlB,EAAVzH,EAAcD,OAF9BC,W,MCjDlC,IAOMqG,EAAqB,CACvBhE,WAAUqF,SFmBd,WACI,MAAO,CACHzD,KAAM3E,IErBUqI,KFyBxB,WACI,MAAO,CACH1D,KAAMzE,IE3BgBoI,YF+B9B,WACI,MAAO,CACH3D,KAAM1E,IEjC6BsI,WFqC3C,WACI,MAAO,CACH5D,KAAMxE,KErCCkH,eAVS,SAAA9C,GACpB,MAAO,CAACuB,MAAQvB,EAAM2B,QAAQN,eACtBvB,MAAOE,EAAM2B,QAAQ7B,MACrBe,MAAQb,EAAM2B,QAAQd,MACtBjB,MAAQI,EAAM0B,MAAM9B,SAMQ4C,EAAzBM,EAvCf,SAAiBR,GAKb,OACI,sBAAKqB,GAAG,OAAR,UACI,wBAAQvD,KAAK,SAAS6D,QAAS3B,EAAM9D,SAArC,sBACA,wBAAQ4B,KAAK,SAAS6D,QAAS3B,EAAMuB,SAArC,sBACA,mBAAGF,GAAG,QAAN,0DACCrB,EAAMf,OACP,sBAAKoC,GAAG,WAAR,UACA,wBAAQvD,KAAK,SAASmC,UAAU,MAAM0B,QAAS3B,EAAMyB,YAArD,8BACA,wBAAQ3D,KAAK,SAASmC,UAAU,MAAM0B,QAAS3B,EAAM0B,WAArD,8BACA,wBAAQ5D,KAAK,UAAUmC,UAAU,MAAM0B,QAAS3B,EAAMwB,KAAtD,0BACA,wBAAQ1D,KAAK,SAASmC,UAAU,MAAM0B,QAAS3B,EAAMuB,SAArD,+BAGCvB,EAAMzB,OAAU,sBAAK8C,GAAG,cAAR,UACT,wBAAQvD,KAAK,SAASmC,UAAU,aAAa0B,QAAS3B,EAAMyB,YAA5D,mBAlBFvH,EAmBQ8F,EAAM1C,MAlBXpD,EAAI0H,MAAK,SAACC,EAAGC,GAAO,OAAQA,EAAEvD,MAAQsD,EAAEtD,SACvCwD,MAAM,EAAG,KAiBQzH,KAAI,SAAC0H,EAAQpI,GAChC,OAAO,oBAAGqG,UAAU,MAAb,UAAgCrG,EAAQ,EAAxC,KAA6CoI,EAAOzD,MAApD,cAAsEyD,EAAO7E,MAA7E,WAAwBvD,YApB/C,IAAcM,K,MCsBlB,IAMMgG,EAAqB,CACvB+B,aHEJ,WACI,MAAO,CACHnE,KAAM9E,IGJIkJ,YHQlB,WACI,MAAO,CACHpE,KAAM/E,IGViBoJ,UHc/B,WACI,MAAO,CACHrE,KAAM7E,KGdCuH,gBATS,SAAA9C,GACpB,MAAO,CAACT,aAAeS,EAAM0B,MAAMnC,aAC/BC,UAAYQ,EAAM0B,MAAMlC,UACxBC,MAAQO,EAAM0B,MAAMjC,SAMY+C,EAAzBM,EA/Bf,SAAcR,GAOV,OANAS,qBAAU,WACNT,EAAMkC,cACNlC,EAAMiC,eACNjC,EAAMmC,cACH,CAACnC,IAGJ,sBAAKqB,GAAG,OAAR,UACI,0BAASA,GAAG,QAAZ,oBACYrB,EAAM/C,gBAElB,0BAASoE,GAAG,QAAZ,oBACYrB,EAAM7C,SAElB,0BAASkE,GAAG,YAAZ,yBACiBrB,EAAM9C,mBCPpBkF,I,MATH,WACR,OACI,sBAAKf,GAAG,MAAR,UACA,cAAC,EAAD,IACA,cAAC,GAAD,IACA,cAAC,EAAD,SCDFgB,GAAQC,YAAYC,EAAcC,YACtCC,OAAOC,8BAAgCD,OAAOC,iCAEhDC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUR,MAAOA,GAAjB,SACE,cAAC,GAAD,QAGJ3B,SAASoC,eAAe,SAO1BxD,M","file":"static/js/main.07b94d7f.chunk.js","sourcesContent":["export const UP = 'UP';\r\nexport const DOWN = 'DOWN';\r\nexport const LEFT = 'LEFT';\r\nexport const RIGHT = 'RIGHT';\r\nexport const INIT_GAME = 'INIT_GAME';\r\nexport const CHECK_WIN = 'CHECK_WIN';\r\nexport const CHECK_LOSE = 'CHECK_LOSE';\r\nexport const CHECK_SCORE = 'CHECK_SCORE';\r\nexport const LOAD_LAST_GAME = 'LOAD_LAST_GAME';\r\nexport const SETTINGS = 'SETTINGS';\r\nexport const SHOW_SCORE = 'SHOW_SCORE';\r\nexport const MUTE_SOUND = 'MUTE_SOUND';\r\nexport const RESET_BEST_SCORE = 'RESET_BEST_SCORE';","function makeLines(array){\r\n    let lines = [];\r\n    array.forEach((value, index) => {\r\n        let lineIndex = Math.floor(index / 4);\r\n        lines[lineIndex] = lines[lineIndex] || [];\r\n        lines[lineIndex].push(value);\r\n    });\r\n    return lines;\r\n}\r\n  \r\nfunction rotate(arr, times = 1){\r\n    const check = times - 1;\r\n    const rotatedArr = arr[0].map((item, idx) => arr.map((row) => row[idx]).reverse());\r\n    return check === 0 ? rotatedArr : rotate(rotatedArr, check);\r\n}\r\n  \r\nfunction sum(arr){\r\n    const result = [];\r\n    const summedArr = [];\r\n    for(let i = 0; i < 4; i++){\r\n    let row = arr[i];\r\n    row = row.filter(val => (val !== 0));\r\n        for(let j = row.length; j >= 0; j--){\r\n            if(row[j] === row[j-1]){\r\n                if(!isNaN(row[j-1])){\r\n            row[j] += row[j-1] + 1;\r\n            row[j-1] = 0\r\n            row = row.filter(val => (val !== 0));\r\n            }}\r\n        }\r\n        row = row.map((numb)=>(numb % 2 === 1) ? numb -= 1 : numb);\r\n    summedArr.push(row);\r\n    }\r\n    for (let i = 0; i < 4; i++){\r\n        let row = summedArr[i];\r\n        result.push(unshiftZeros(row));\r\n    }\r\n    return result\r\n}\r\n\r\nfunction unshiftZeros(array){\r\n    if (array.length < 4) array.unshift(0);\r\n    return array.length === 4 ? array : unshiftZeros(array);\r\n}\r\n\r\nfunction findEmpties(array){\r\n    let emptyIndex = [];\r\n    array.forEach((value, index) => {if(value === 0){emptyIndex.push(index)}})\r\n    return emptyIndex;\r\n}\r\n\r\n\r\nfunction putRandomNumber(array){\r\n    const possibleIndexes = findEmpties(array);\r\n    const randomNumb = [2, 4, 2, 2, 2, 2, 2, 2, 4, 2];\r\n    \r\n    function getRandomInt(max) {\r\n    return Math.floor(Math.random() * Math.floor(max));          \r\n    }\r\n\r\n    const insertIndex = getRandomInt(10),\r\n    currentNumb = randomNumb[insertIndex],\r\n    possiblePlace = getRandomInt(possibleIndexes.length),\r\n    currentPlace = possibleIndexes[possiblePlace];\r\n    array[currentPlace] = currentNumb;\r\n    return array;\r\n}\r\n\r\nfunction checkPossibleMove(defaultArray, changedArray){\r\n    for (let i = 0; i < defaultArray.length; i++){\r\n    if (defaultArray[i] !== changedArray[i]) return true\r\n    }\r\n}\r\n    export {sum, rotate, findEmpties, makeLines, checkPossibleMove, putRandomNumber};","import {putRandomNumber, findEmpties} from './arrayTransformation'\r\n\r\nfunction initGame(){\r\n    const emptyField = [];\r\n            for(let i = 0; i <16; i++){\r\n                emptyField.push(0);\r\n            }\r\n    let tiles = putRandomNumber(emptyField);\r\n    tiles = putRandomNumber(tiles);\r\n    return tiles;\r\n}\r\n\r\n\r\nfunction calculateScore(array){\r\n    return array.reduce((sum, value) => sum += value, 0);\r\n}\r\n\r\nfunction isWin(array){\r\n    let result = array.filter((value) => value === 2048);\r\n    return result.length === 0 ? false : true;\r\n}\r\n\r\nfunction isLose(array){\r\n    const empty = findEmpties(array);\r\n    if (empty.length === 0){\r\n        const result = [];\r\n        for(let i = 0; i < array.length; i++){\r\n           if (array[i] === array[i+1]){\r\n               if (i !== 3 && i !== 7 && i !== 11){\r\n               result.push(array[i]);\r\n            }\r\n           } \r\n            if(i <= 11){\r\n                if (array[i] === array[i+4]){\r\n                    result.push(array[i]);\r\n                } \r\n            }\r\n        }\r\n        return (result.length === 0) ? true : false;\r\n    }\r\n    return false\r\n}\r\nexport {initGame, calculateScore, isLose, isWin};","export default __webpack_public_path__ + \"static/media/win.b64b2bab.mp3\";","export default __webpack_public_path__ + \"static/media/lose.ff6198f5.mp3\";","export default __webpack_public_path__ + \"static/media/keypress.f26ec9a9.mp3\";","import {UP, DOWN, LEFT, RIGHT, INIT_GAME, CHECK_WIN,\r\n     CHECK_LOSE, CHECK_SCORE, LOAD_LAST_GAME, RESET_BEST_SCORE,\r\n     MUTE_SOUND} from '../actions/actionType'\r\nimport {sum, rotate, makeLines, checkPossibleMove, putRandomNumber} from './arrayTransformation'\r\nimport {initGame, isWin, isLose, calculateScore} from './gameLogic'\r\n\r\nimport winSound from \"../../assets/sounds/win.mp3\";\r\nimport loseSound from \"../../assets/sounds/lose.mp3\";\r\nimport moveSound from \"../../assets/sounds/keypress.mp3\";\r\n\r\nconst winGame = new Audio(winSound),\r\n    loseGame = new Audio(loseSound),\r\n    moveGame = new Audio(moveSound);\r\n\r\nconst initialState = {\r\n    tiles : [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n    currentScore : 0,\r\n    bestScore : 0,\r\n    moves : 0,\r\n    win : false,\r\n    lose : false,\r\n    top10 : [],\r\n    gameStop: false,\r\n    muted : false\r\n};\r\n\r\n\r\nconst fieldReducer = (state = initialState, action) => {\r\n    const tiles = state.tiles;\r\n    let moves = state.moves;\r\n    const arr = [].concat(tiles);\r\n    const arrLined = makeLines(arr);\r\n    const bestScore = state.bestScore;\r\n    \r\n    switch(action.type) {\r\n        case UP: {\r\n            const num = action.payload,\r\n                back = 4 - num,\r\n                swappedArr = rotate(arrLined, num),\r\n                summedArr = sum(swappedArr);\r\n            let result = rotate(summedArr, back).flat(1);\r\n            if (checkPossibleMove(arr, result) && !state.gameStop){\r\n                result = putRandomNumber(result);\r\n                moves += 1;\r\n                if (!state.muted) moveGame.play();\r\n            return {...state, tiles : result, moves : moves}\r\n            }\r\n        return {...state};\r\n        };\r\n        case DOWN: {\r\n            const num = action.payload,\r\n                back = 4 - num,\r\n                swappedArr = rotate(arrLined, num),\r\n                summedArr = sum(swappedArr);\r\n            let result = rotate(summedArr, back).flat(1);\r\n                if (checkPossibleMove(arr, result) && !state.gameStop){\r\n                    result = putRandomNumber(result);\r\n                    moves += 1;\r\n                    if (!state.muted) moveGame.play();\r\n                    return {...state, tiles : result, moves : moves}\r\n                }\r\n            return {...state};\r\n        };\r\n        case LEFT: {\r\n            const num = action.payload,\r\n                back = 4 - num,\r\n                swappedArr = rotate(arrLined, num),\r\n                summedArr = sum(swappedArr);\r\n            let result = rotate(summedArr, back).flat(1);\r\n                if (checkPossibleMove(arr, result) && !state.gameStop){\r\n                    result = putRandomNumber(result);\r\n                    moves += 1;\r\n                    if (!state.muted) moveGame.play();\r\n                    return {...state, tiles : result, moves : moves}\r\n                }\r\n            return {...state};\r\n                \r\n        };\r\n        case RIGHT: {\r\n            const summedArr = sum(arrLined);\r\n            let result = summedArr.flat(1);\r\n                if (checkPossibleMove(arr, result) && !state.gameStop){\r\n                    result = putRandomNumber(result);\r\n                    moves += 1;\r\n                    if (!state.muted) moveGame.play();\r\n                    return {...state, tiles : result, moves : moves}\r\n                }\r\n            return {...state};\r\n        };\r\n        case INIT_GAME: {\r\n            const result = initGame();\r\n            return {...state, tiles : result, moves: 0, currentScore : 0, win : false, lose : false, gameStop: false}\r\n        }\r\n\r\n        case CHECK_WIN: {\r\n            const wasWin = state.win;\r\n            const win = isWin(tiles);\r\n            const bestResults = state.top10;\r\n            if (win !== wasWin){\r\n               bestResults.push({score : state.currentScore, moves : state.moves});\r\n               if (!state.muted) winGame.play();\r\n            }\r\n             \r\n         return win ? {...state, win : win, gameStop : win, top10 : bestResults} : {...state};\r\n        }\r\n        case CHECK_LOSE: {\r\n            const lastLose = state.lose;\r\n            const lose = isLose(tiles);\r\n            const bestResults = state.top10;\r\n            if (lose !== lastLose){\r\n               bestResults.push({score : state.currentScore, moves : state.moves});\r\n               if (!state.muted) loseGame.play();\r\n            } \r\n            return lose ? {...state, lose : lose, gameStop : lose, top10 : bestResults} : {...state};\r\n        }\r\n        case CHECK_SCORE: {\r\n            const currentScore = calculateScore(tiles);\r\n            return currentScore > bestScore ? {...state, currentScore, bestScore : currentScore} : {...state, currentScore};\r\n        }\r\n        case LOAD_LAST_GAME: {\r\n            const loadedState = JSON.parse(localStorage.getItem('lastState'));\r\n            return (loadedState !== null) ? {...state, ...loadedState} : state;\r\n        }\r\n\r\n        case RESET_BEST_SCORE: {\r\n            const bestScore = 0;\r\n            const top10 = [];\r\n            return {...state, top10 : top10, bestScore : bestScore};\r\n        }\r\n        case MUTE_SOUND: {\r\n            const isMuted = !state.muted;\r\n            return {...state, muted : isMuted}\r\n        }\r\n        default:\r\n            return state;\r\n\r\n    }\r\n};\r\n\r\n\r\nexport default fieldReducer;","import {SETTINGS, SHOW_SCORE} from '../actions/actionType'\r\n\r\nconst initialState = {\r\n    settingsIsOpen : false,\r\n    score : false,\r\n};\r\n\r\nconst buttonsReducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case SETTINGS: {\r\n            const modal = !state.settingsIsOpen;\r\n            return {...state, settingsIsOpen : modal}\r\n        }\r\n            case SHOW_SCORE: {\r\n            const score = !state.score;\r\n        return {...state, score : score}\r\n        }\r\n        default: return state;\r\n    }\r\n}\r\nexport default buttonsReducer;","import {combineReducers} from 'redux';\r\nimport fieldReducer from './fieldReducer';\r\nimport buttonsReducer from './buttonsReducer'\r\n\r\n\r\nconst reducers = combineReducers({\r\n    field : fieldReducer,\r\n    buttons : buttonsReducer\r\n})\r\n\r\nexport default reducers;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport './Tile.css'\r\nexport default function Tile(props){\r\nreturn(\r\n    <div className={`tile tile-${props.value}`}>\r\n    {props.value}\r\n    </div>\r\n    )\r\n}","import {UP, DOWN, LEFT, RIGHT, INIT_GAME, CHECK_LOSE, CHECK_SCORE,\r\n     CHECK_WIN, LOAD_LAST_GAME, SETTINGS, MUTE_SOUND, SHOW_SCORE,\r\n     RESET_BEST_SCORE} from './actionType'\r\n\r\nfunction moveUp(){\r\n    return {\r\n        type: UP,\r\n        payload: 1\r\n    };\r\n};\r\nfunction moveDown(){\r\n    return {\r\n        type: DOWN,\r\n        payload : 3\r\n    };\r\n};\r\n\r\nfunction moveLeft(){\r\n    return {\r\n        type: LEFT,\r\n        payload : 2\r\n    };\r\n};\r\n\r\nfunction moveRight(){\r\n    return {\r\n        type: RIGHT,\r\n        payload : 4\r\n    };\r\n};\r\n\r\nfunction initGame(){\r\n    return {\r\n        type: INIT_GAME,\r\n    };\r\n}\r\n\r\nfunction checkForLose(){\r\n    return {\r\n        type: CHECK_LOSE,\r\n    };\r\n}\r\n\r\nfunction checkForWin(){\r\n    return {\r\n        type: CHECK_WIN,\r\n    };\r\n}\r\n\r\nfunction calcScore(){\r\n    return {\r\n        type: CHECK_SCORE,\r\n    };\r\n}\r\n\r\nfunction loadGame(){\r\n    return {\r\n        type: LOAD_LAST_GAME,\r\n    }\r\n}\r\n\r\nfunction settings(){\r\n    return {\r\n        type: SETTINGS,\r\n    }\r\n}\r\n\r\nfunction mute(){\r\n    return {\r\n        type: MUTE_SOUND,\r\n    }\r\n}\r\n\r\nfunction leaderBoard(){\r\n    return {\r\n        type: SHOW_SCORE,\r\n    }\r\n}\r\n\r\nfunction resetScore(){\r\n    return {\r\n        type: RESET_BEST_SCORE,\r\n    }\r\n}\r\n\r\nexport  {moveUp, moveDown, moveLeft, moveRight, initGame, checkForLose,\r\n     checkForWin, calcScore, loadGame, settings, mute, leaderBoard,\r\n     resetScore};\r\n","import React, {useEffect} from 'react';\r\nimport './Field.css';\r\nimport Tile from '../tile/Tile'\r\nimport {makeLines} from '../../redux/reducers/arrayTransformation'\r\nimport {connect} from 'react-redux'\r\nimport {moveUp, moveDown, moveLeft, moveRight, initGame, loadGame} from '../../redux/actions/actionCreators'\r\n\r\n\r\nfunction Field(props){\r\n    useEffect(()=>{\r\n        document.addEventListener('keydown', (e) => {eventHandler(e);\r\n        });\r\n        return ()=>{\r\n          document.removeEventListener('keydown', (e) => {eventHandler(e);\r\n          });\r\n        }\r\n    },[]);\r\n    useEffect(()=>{\r\n          props.loadGame()\r\n        },[]);\r\n    useEffect(()=>{\r\n      saveGame(props)\r\n    },[props]);\r\n    const eventHandler = (event) => {\r\n        switch (event.keyCode) {\r\n            case 37 :\r\n                (props.moveLeft());\r\n                break;\r\n            case 65 :\r\n                (props.moveLeft());\r\n                break;    \r\n              case 38:\r\n                (props.moveUp());\r\n                break;\r\n              case 87:\r\n                (props.moveUp());\r\n                break;  \r\n              case 39:\r\n                (props.moveRight());\r\n                break;\r\n              case 68:\r\n                (props.moveRight());\r\n                break;  \r\n              case 40:\r\n                (props.moveDown());\r\n                break;\r\n              case 83:\r\n                (props.moveDown());\r\n                break;  \r\n              case 82:\r\n                (props.initGame());\r\n                break;\r\n              \r\n              default: break;\r\n        }\r\n    }\r\n    const saveGame = (state) => {\r\n      const currentState = JSON.stringify(state);\r\n      localStorage.setItem('lastState', currentState);\r\n    };\r\n\r\n    if (props.lose){\r\n      return (\r\n        <div className='endScreen' id='loseScreen'>\r\n          <p>Game over! =(</p>\r\n          <p>You reached {props.currentScore} in {props.moves} steps</p>\r\n        </div>\r\n      )\r\n    }\r\n    if (props.win){\r\n      return (\r\n        <div className='endScreen' id='winScreen'>\r\n          <p>Congratulations!</p>\r\n          <p>You win the game with {props.currentScore} score in {props.moves} steps!</p>\r\n        </div>\r\n      )\r\n    }\r\n    if (!props.win && !props.lose){\r\n    return(\r\n        <div id='field'>\r\n            {\r\n            makeLines(props.tiles).map((tiles,lineIndex) => {\r\n                    return (\r\n                        <div key={lineIndex} className='tileLine'>\r\n                           {tiles.map((tile, index) => {\r\n                                return <Tile key={lineIndex*4 + index} value={tile} />\r\n                                })} \r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n        )}\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n     return {...state.field, muted : state.field.muted}\r\n    };\r\n\r\nconst mapDispatchToProps = {\r\n    moveUp, moveDown, moveLeft, moveRight, initGame, loadGame,\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Field)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './buttons.css'\r\nimport {initGame, settings, mute, leaderBoard, resetScore} from '../../redux/actions/actionCreators'\r\n\r\nfunction Buttons(props){\r\n    function sort(arr){\r\n        let newArr = arr.sort((a, b) => {return (b.score - a.score)});\r\n        return newArr.slice(0, 10);\r\n    }\r\n    return (\r\n        <div id='btns'>\r\n            <button type='button' onClick={props.initGame}>New game</button>\r\n            <button type='button' onClick={props.settings}>Settings</button>\r\n            <p id='rules'>Use arrows or WASD to move, R - for new game</p>\r\n            {props.modal && (\r\n            <div id='settings'>\r\n            <button type='button' className='set' onClick={props.leaderBoard}>Show best scores</button>\r\n            <button type='button' className='set' onClick={props.resetScore}>Reset statistics</button>\r\n            <button type='button>' className='set' onClick={props.mute}>Sound on/off</button>\r\n            <button type='button' className='set' onClick={props.settings}>Close settings</button>\r\n            </div>\r\n            )}\r\n            {props.score && (<div id='leaderBoard'>\r\n                    <button type='button' className=\"closeSetts\" onClick={props.leaderBoard}>&times;</button>\r\n                    {sort(props.top10).map((record, index) => {\r\n                    return <p className='top' key={index}>{index + 1}. {record.score} points in {record.moves} steps</p>})}\r\n                    </div>\r\n            )}\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {modal : state.buttons.settingsIsOpen,\r\n            muted: state.buttons.muted,\r\n            score : state.buttons.score,\r\n            top10 : state.field.top10};\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    initGame, settings, mute, leaderBoard, resetScore\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Buttons);","import React, {useEffect} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport './stat.css'\r\nimport {checkForLose, checkForWin, calcScore} from '../../redux/actions/actionCreators'\r\n\r\n\r\nfunction Stat(props){\r\n    useEffect(()=>{\r\n        props.checkForWin();\r\n        props.checkForLose();\r\n        props.calcScore();  \r\n        }, [props]\r\n        )\r\n    return(\r\n        <div id='stat'>\r\n            <section id='score'>\r\n                Score: {props.currentScore}\r\n            </section>\r\n            <section id='moves'>\r\n                Steps: {props.moves}\r\n            </section>\r\n            <section id='bestScore'>\r\n                Best score: {props.bestScore}\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {currentScore : state.field.currentScore,\r\n        bestScore : state.field.bestScore,\r\n        moves : state.field.moves,\r\n        }\r\n};\r\nconst mapDispatchToProps = {\r\n    checkForLose, checkForWin, calcScore\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Stat)","import React from 'react';\r\nimport Field from '../field/Field';\r\nimport Buttons from '../buttons/buttons';\r\nimport Stat from '../stat/stat';\r\nimport './app.css'\r\n\r\nconst App = () => {\r\n    return(\r\n        <div id='app'>\r\n        <Buttons />\r\n        <Stat />\r\n        <Field />\r\n        </div>\r\n    )\r\n}\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux'\r\nimport gameReducers from './redux/reducers/reducer'\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { createStore } from 'redux';\r\nimport App from './components/app/app'\r\nimport { compose } from 'redux';\r\n\r\nconst store = createStore(gameReducers, compose(\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n  ))\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}